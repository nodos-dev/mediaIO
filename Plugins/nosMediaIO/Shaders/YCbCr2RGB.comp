// Copyright MediaZ Teknoloji A.S. All Rights Reserved.

#version 450
#include "ConversionsCommon.glsl"
#include "InterlacedFlags.glsl"

layout (local_size_x = 8, local_size_y = 9) in;
layout (binding = 0) readonly buffer SourceBuffer
{
    uint Pixels[];
} Source;
layout (binding = 1, rgba16)  uniform writeonly  image2D Output;

uvec2 InputTextureSize()
{
	uvec2 TexSize = ubo.Resolution;
    const int OutInterlaced = int((InterlacedFlags & NOS_OUTPUT_INTERLACED_MASK) != 0);
	uvec2 YCbCrExt = uvec2((ubo.PixelFormat == YCBCR_PIXEL_FORMAT_V210) ? ((TexSize.x + (48 - TexSize.x % 48) % 48) / 3) << 1 : TexSize.x >> 1, 
					TexSize.y >> OutInterlaced);
	return YCbCrExt;
}

uvec4 Load(const ivec2 coord)
{
	uint pixel = Source.Pixels[(coord.y * (InputTextureSize().x)) + coord.x];
	uvec4 color;
	color.r = pixel & 0xFF;
	color.g = (pixel >> 8) & 0xFF;
	color.b = (pixel >> 16) & 0xFF;
	color.a = (pixel >> 24) & 0xFF;
	
	return color;
}

void Construct2(vec4 T0, vec4 T1, out vec4 X[2])
{
    vec3 Lin = IDXff(vec3(T0.yw, T1.y));
	vec2 Diff = abs(Lin.xz - Lin.yy);
    vec2 C2 = mix(T0.rb, T1.rb, Diff.x + Diff.y > 0.0 ? clamp(Diff.x / (Diff.x + Diff.y), 0, 1) : 0.5);
    X[0] = SDR_In(T0.yxz);
    X[1] = SDR_In(vec3(T0.a, C2));
}

void Store2(const vec4 C[2], ivec2 Base)
{
    imageStore(Output, Base + ivec2(0, 0), C[0]);
    imageStore(Output, Base + ivec2(1, 0), C[1]);
}

void Store(const vec4 C[6], ivec2 Base)
{
    imageStore(Output, Base + ivec2(0, 0), C[0]);
    imageStore(Output, Base + ivec2(1, 0), C[1]);
    imageStore(Output, Base + ivec2(2, 0), C[2]);
    imageStore(Output, Base + ivec2(3, 0), C[3]);
    imageStore(Output, Base + ivec2(4, 0), C[4]);
    imageStore(Output, Base + ivec2(5, 0), C[5]);
}

void yuv8(const ivec2 dst, uvec4 U0, uvec4 U1, const bool interlaced)
{
    vec4 X[2];
    Construct2(U0 / 255.0, U1 / 255.0, X);
    Store2(X, dst);
    if(interlaced) Store2(X, dst + ivec2(0, 1));
}

void main_yuv8()
{
    const int   Interlaced = int((InterlacedFlags & NOS_OUTPUT_INTERLACED_MASK) != 0);
    const ivec2 D = ivec2(gl_NumWorkGroups * gl_WorkGroupSize).xy;
    const ivec2 Q = ivec2(InputTextureSize());

    const ivec2 N          = Q / D;
    const ivec2 uv         = ivec2(gl_GlobalInvocationID.xy) * N;
    
    for(int j = 0; j < N.y; ++j)
    {
        uvec4 U0;
        uvec4 U1 = Load(uv + ivec2(0, j));
        for(int i = 0; i < N.x; ++i)
        {
            const ivec2 ij = uv + ivec2(i, j);
            U0 = U1;
            U1 = Load(ij + ivec2(1, 0));
            yuv8(ij * ivec2(2, 1 + Interlaced), U0, U1, Interlaced != 0);
        }
    }
}

uint ToDword(uvec4 C)
{
    return ((C.w & 0x3F) << 24) | (C.z << 16) | (C.y << 8)  | C.x;
}

uint Get10Bits(uint B, uint lo)
{
    return (B >> lo) & 0x3FF;
}

void Unpack(ivec2 uv, out uvec4 Y[3])
{
    const uvec4 C0 = Load(uv + ivec2(0, 0));
    const uvec4 C1 = Load(uv + ivec2(1, 0));
    const uvec4 C2 = Load(uv + ivec2(2, 0));
    const uvec4 C3 = Load(uv + ivec2(3, 0));
    
    const uvec4 x = uvec4(C0.x, C1.x, C2.x, C3.x);
    const uvec4 y = uvec4(C0.y, C1.y, C2.y, C3.y);
    const uvec4 z = uvec4(C0.z, C1.z, C2.z, C3.z);
    const uvec4 w = uvec4(C0.w, C1.w, C2.w, C3.w);
    
    Y[0] = 0x3FF & (x | (y << 8));
    Y[1] = 0x3FF & ((y >> 2) | (z << 6));
    Y[2] = 0x3FF & ((z >> 4) | (w << 4));
}

void v210(const ivec2 dst, const ivec2 src, const bool interlaced)
{
    uvec4 M[3];
    uvec4 N[3];
    Unpack(src, M);
    Unpack(src + ivec2(4, 0), N);
    vec4 Q[3][2];
    vec4 M0 = uvec4(M[0][0], M[1][0], M[2][0], M[0][1]) / 1023.0;
    vec4 M1 = uvec4(M[1][1], M[2][1], M[0][2], M[1][2]) / 1023.0;
    vec4 M2 = uvec4(M[2][2], M[0][3], M[1][3], M[2][3]) / 1023.0;
    vec4 M3 = uvec4(N[0][0], N[1][0], N[2][0], N[0][1]) / 1023.0;
    Construct2(M0, M1, Q[0]);
    Construct2(M1, M2, Q[1]);
    Construct2(M2, M3, Q[2]);
    const vec4 X[6] = vec4[6](Q[0][0],Q[0][1],Q[1][0],Q[1][1],Q[2][0],Q[2][1]);
    Store(X, dst);
    if(interlaced) Store(X, dst + ivec2(0, 1));
}

void main_v210()
{
    const int   Interlaced = int((InterlacedFlags & NOS_OUTPUT_INTERLACED_MASK) != 0);
    const ivec2 N          = ivec2(InputTextureSize()) / ivec2(4, 1) / ivec2(gl_NumWorkGroups * gl_WorkGroupSize).xy;
    const ivec2 uv         = ivec2(gl_GlobalInvocationID.xy) * N;
 
    for(int i = 0; i < N.x; ++i)
    {
        for(int j = 0; j < N.y; ++j)
        {
            const ivec2 ij  = uv + ivec2(i, j);
            v210(ij * ivec2(6, 1 + Interlaced), ij * ivec2(4, 1), Interlaced != 0);
        }
    }
}

void main()
{
    if(ubo.PixelFormat == YCBCR_PIXEL_FORMAT_V210) main_v210();
    else main_yuv8();
}