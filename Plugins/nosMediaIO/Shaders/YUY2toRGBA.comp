// Copyright MediaZ Teknoloji A.S. All Rights Reserved.

#version 450

layout (local_size_x = 8, local_size_y = 8) in;
layout (binding = 0)  readonly buffer InputYUY2Buffer
{
    uint Pixels[];
} Input;
layout (binding = 1, rgba8)  uniform writeonly  image2D Output;

void main()
{
	uint workgroupSizeX = gl_WorkGroupSize.x;
	uint workgroupSizeY = gl_WorkGroupSize.y;
	uint numWorkGroupsX = gl_NumWorkGroups.x;
	uint numWorkGroupsY = gl_NumWorkGroups.y;

	uint globalIndex = gl_GlobalInvocationID.y * gl_NumWorkGroups.x * gl_WorkGroupSize.x + gl_GlobalInvocationID.x;

	ivec2 texelCoords = ivec2(gl_GlobalInvocationID) * ivec2(2, 1);

	ivec2 imageSize = imageSize(Output);

	if (texelCoords.x >= imageSize.x || texelCoords.y >= imageSize.y)
	{
		return;
	}

	uint yuy2 = Input.Pixels[globalIndex];
	int y0 = int(yuy2 & 0x000000FF);
	int u = int((yuy2 & 0x0000FF00) >> 8);
	int y1 = int((yuy2 & 0x00FF0000) >> 16);
	int v = int((yuy2 & 0xFF000000) >> 24);

	int c = y0 - 16;
	int d = u - 128;
	int e = v - 128;

	uint r0 = clamp((298 * c + 409 * e + 128) >> 8, 0, 255);
	uint g0 = clamp((298 * c - 100 * d - 208 * e + 128) >> 8, 0, 255);
	uint b0 = clamp((298 * c + 516 * d + 128) >> 8, 0, 255);

	vec4 color0 = vec4(r0 / 255.0, g0 / 255.0, b0 / 255.0, 1.0);

	imageStore(Output, texelCoords, color0);
	texelCoords.x += 1;
	if(texelCoords.x < imageSize.x)
	{
		c = y1 - 16;

		uint r1 = clamp((298 * c + 409 * e + 128) >> 8, 0, 255);
		uint g1 = clamp((298 * c - 100 * d - 208 * e + 128) >> 8, 0, 255);
		uint b1 = clamp((298 * c + 516 * d + 128) >> 8, 0, 255);

		vec4 color1 = vec4(r1 / 255.0, g1 / 255.0, b1 / 255.0, 1.0);
		imageStore(Output, texelCoords, color1);
	}
}