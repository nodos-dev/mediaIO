// Copyright MediaZ Teknoloji A.S. All Rights Reserved.

#version 450
#include "ConversionsCommon.glsl"
#include "InterlacedFlags.glsl"

layout (local_size_x = 8, local_size_y = 9) in;
layout (binding = 0)  uniform sampler2D Source;
layout (binding = 1) writeonly buffer OutputBuffer
{
    uint Pixels[];
} Output;

ivec2 OutputTextureSize()
{
	ivec2 TexSize = textureSize(Source, 0);
    const int OutInterlaced = int(IsOutputInterlaced);
	ivec2 YCbCrExt = ivec2((ubo.PixelFormat == YCBCR_PIXEL_FORMAT_V210) ? ((TexSize.x + (48 - TexSize.x % 48) % 48) / 3) << 1 : TexSize.x >> 1, 
					TexSize.y >> OutInterlaced);
	return YCbCrExt;
}

void Store(const ivec2 dst, uvec4 color)
{
	ivec2 texSize = OutputTextureSize();
	color = clamp(color, 0, 255);
    uint target = (color.a << 24) | (color.b << 16) | (color.g << 8) | (color.r);
    Output.Pixels[(dst.y * texSize.x) + dst.x] = target;
}

void yuv8(const ivec2 dst, const ivec2 src, const int YOffset)
{
    uvec3 Y0 = SDR_Out_8(texelFetch(Source, src + ivec2(0, YOffset), 0).xyz);
    uvec3 Y1 = SDR_Out_8(texelFetch(Source, src + ivec2(1, YOffset), 0).xyz);
    uvec2 C0  = (Y0.yz + Y1.yz) >> 1;
    //imageStore(Output, dst, uvec4(C0.x, Y0.x, C0.y, Y1.x));
    Store(dst, uvec4(C0.x, Y0.x, C0.y, Y1.x));
}

void main_yuv8()
{
    const int   OutInterlaced = int(IsOutputInterlaced); // Meaning the output buffer is half the height of the input
    const int   InProgressive = int((FieldType ^ NOS_INTERLACED_MASK) == 0);
    const int   OutYOffset    = int(OutInterlaced == 0 && InProgressive == 1 && (FieldType & NOS_FIELD_TYPE_ODD) != 0);
    const int   InOdd         = int(InProgressive == 0 && (FieldType & NOS_FIELD_TYPE_ODD) != 0);
    const ivec2 D = ivec2(gl_NumWorkGroups * gl_WorkGroupSize).xy;
    const ivec2 Q = OutputTextureSize();
    const ivec2 N          = Q / D;
    const ivec2 LocalGroupCoord = ivec2(gl_GlobalInvocationID.xy) * N;
    
    for(int i = 0; i < N.x; ++i)
    {
        for(int j = 0; j < N.y; j++)
        {
            const ivec2 ij = LocalGroupCoord + ivec2(i, j);
            // If my input is progressive or output is interlaced, we write to every pixel regardless of the field
            // If my input is interlaced and output is progressive, we write only to relevant pixels
            if ((ij.y % 2) == InOdd || InProgressive == 1 || OutInterlaced == 1)
                yuv8(ij, ij * ivec2(2, 1 + OutInterlaced), OutYOffset);
        }
    }
}

void v210(const ivec2 dst, const ivec2 src, const int YOffset)
{
    uvec4 Y[3];
    for(int k = 0; k < 3; ++k)
    {
        uvec3 Y0 = SDR_Out_10(texelFetch(Source, src + ivec2(2*k+0, YOffset), 0).xyz);
        uvec3 Y1 = SDR_Out_10(texelFetch(Source, src + ivec2(2*k+1, YOffset), 0).xyz);
        uvec2 C  = (Y0.yz + Y1.yz) >> 1;
        Y[k] = uvec4(C.x, Y0.x, C.y, Y1.x);
    }
    
    const uvec4 x = uvec4(Y[0].x, Y[0].w, Y[1].z, Y[2].y);
    const uvec4 y = uvec4(Y[0].y, Y[1].x, Y[1].w, Y[2].z);
    const uvec4 z = uvec4(Y[0].z, Y[1].y, Y[2].x, Y[2].w);

    const uvec4 Q[4] = uvec4[4](0xff & x, 0xff & ((x >> 8) | (y << 2)), 0xff & ((y >> 6) | (z << 4)), z >> 4);
    
    for(int k = 0; k < 4; ++k) 
        //imageStore(Output, dst + ivec2(k, 0), uvec4(Q[0][k], Q[1][k], Q[2][k], Q[3][k]));
        Store(dst + ivec2(k, 0), uvec4(Q[0][k], Q[1][k], Q[2][k], Q[3][k]));
}

void main_v210()
{
    const int   OutInterlaced = int(IsOutputInterlaced);
    const int   InProgressive = int((FieldType ^ NOS_INTERLACED_MASK) == 0);
    const int   OutYOffset    = int((FieldType & NOS_FIELD_TYPE_ODD) != 0);
    const int   InOdd         = int((FieldType & NOS_FIELD_TYPE_ODD) != 0);
    const ivec2 N             = OutputTextureSize() / ivec2(4, 1) /  ivec2(gl_NumWorkGroups * gl_WorkGroupSize).xy;
    const ivec2 LocalGroupCoord = ivec2(gl_GlobalInvocationID.xy) * N;
    
    for(int i = 0; i < N.x; ++i)
    {
        for(int j = 0; j < N.y; ++j)
        {
            const ivec2 ij  = LocalGroupCoord + ivec2(i, j);
            if ((ij.y % 2) == InOdd || InProgressive == 1 || OutInterlaced == 1)
                v210(ij * ivec2(4, 1), ij * ivec2(6, 1 + OutInterlaced), OutYOffset);
        }
    }
}

void main()
{
    if (ubo.PixelFormat == YCBCR_PIXEL_FORMAT_V210) main_v210();
    else main_yuv8();
}







