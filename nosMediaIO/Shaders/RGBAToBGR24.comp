// Copyright MediaZ Teknoloji A.S. All Rights Reserved.

#version 450
#extension GL_EXT_shader_8bit_storage : enable

layout (local_size_x = 1, local_size_y = 1) in;
layout (binding = 0)  uniform sampler2D Source;
layout (binding = 1) writeonly buffer OutputBuffer
{
    uint Pixels[];
} Output;

uvec3 fetchPixel(uint x, uint y){
    vec4 color = pow(texelFetch(Source, ivec2(x,y), 0), vec4(1/2.2f));
	
    vec3 clamped = clamp(color.rgb, vec3(0.0f), vec3(1.0f));
    // Convert color channels to byte values
    uint r = uint(clamped.r * 255.0f);
    uint g = uint(clamped.g * 255.0f);
    uint b = uint(clamped.b * 255.0f);
    return uvec3(b, g, r);
}

void main() {

    // Calculate the global coordinates for this thread
    ivec2 size = textureSize(Source, 0);
    ivec2 coord = ivec2(gl_GlobalInvocationID.x * 4, gl_GlobalInvocationID.y);

    // Ensure we don't go out of bounds
    if (coord.x + 3 >= size.x || coord.y >= size.y) {
        return;
    }

    // Fetch RGB values for 4 adjacent pixels (clamped to texture bounds)
    uvec3 pixels[4];
    for (uint i = 0; i < 4; i++) {
        uint xCoord = coord.x + i;
        if (xCoord < uint(size.x)) {
            pixels[i] = fetchPixel(xCoord, coord.y);
        } else {
            pixels[i] = uvec3(255); // Fill with black if out of bounds
        }
    }
    // Compute the global pixel index
    uint globalPixelIndx = coord.y * size.x + coord.x;

    // Compute the byte offset in the output buffer
    uint byteOffset = globalPixelIndx * 3;

    // Determine the target word index and byte offset within the word
    uint wordIndex = byteOffset / 4;

	uint values[3] = {0, 0, 0};
	for(uint byteIndx = 0; byteIndx < 12; byteIndx++){
		uint componentIndx = byteIndx % 3;
		uint pixelIndx = byteIndx / 3;
		uint componentValue = pixels[pixelIndx][componentIndx];
		if(componentValue > 255){ componentValue = 255; }
		values[byteIndx / 4] |= componentValue << (24 - ((3-(byteIndx % 4)) * 8));
	}
	Output.Pixels[wordIndex] = values[0];
	Output.Pixels[wordIndex + 1] = values[1];
	Output.Pixels[wordIndex + 2] = values[2];
}






























































